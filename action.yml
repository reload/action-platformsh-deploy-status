name: 'Platform.sh Deploy status'
description: 'Detect if a platform.sh site has deployed successfully'
branding:
  icon: 'clock'
  color: 'purple'

inputs:
  PLATFORMSH_KEY:
    description: "API key for connecting to Platform.sh"
    required: true
    type: string

  PLATFORMSH_ID:
    description: "ID for the Platform.sh project."
    required: true
    type: string

  ENVIRONMENT_NAME:
    description: "Which environment to check against - defaults to pr-NUMBER"
    default: "pr-${{ github.event.pull_request.number }}"
    required: false
    type: string

  ACTIVITY_TYPES:
    description: "Comma-seperated types of deployments to wait for. Default: push - See types here: https://docs.platform.sh/integrations/activity/reference.html#environment-activity-types"
    default: "push"
    required: true
    type: string

  DEPLOY_STATUS_PATH:
    description: 'The location of the deploy-status file on the website.'
    default: '/sites/default/files/deploy-status'
    required: false
    type: string

  PSH_DETECTION_WAIT:
    description: "How long should we maximum wait for PSH to detect the push? If the branch doesnt exist in the PlatformSH GIT Remote, this is how long the action will take. Actually inactive environments get detected instantly. Default: 120 seconds."
    default: 120
    required: false
    type: integer

  ALLOW_CANCEL_CRON:
    description: "Can we cancel on-going crons, to speed up deployment? default: 0"
    default: 0
    required: false
    type: integer

outputs:
  url:
    description: "The ready-to-connect URL"
    value: ${{ steps.platformsh_url.outputs.url }}

runs:
  using: "composite"
  steps:
    - uses: reload/action-platformsh-url@main
      id: platformsh_url
      with:
        PLATFORMSH_ID: ${{ inputs.PLATFORMSH_ID }}
        PLATFORMSH_KEY: ${{ inputs.PLATFORMSH_KEY }}
        ENVIRONMENT_NAME: ${{ inputs.ENVIRONMENT_NAME }}
        PSH_DETECTION_WAIT: ${{ inputs.PSH_DETECTION_WAIT }}
        ALLOW_CANCEL_CRON: ${{ inputs.ALLOW_CANCEL_CRON }}

    - name: Check latest deploy status
      shell: bash
      run: |
        set +e
        URL="${{ steps.platformsh_url.outputs.url }}"
        DEPLOY_STATUS_URL="$URL${{ inputs.DEPLOY_STATUS_PATH }}"

        echo "Checking $DEPLOY_STATUS_URL .."

        CURL_HTTP_STATUS=$(curl -L -s -o /dev/null -w "%{http_code}" $DEPLOY_STATUS_URL)

        if [[ "$CURL_HTTP_STATUS" != "200" ]]; then \
          echo "Could not find the deploy-status file at $DEPLOY_STATUS_URL"; \
          echo "Did you remember to create during the build step in .platform.app.yaml?"; \
          echo "More info: https://github.com/reload/action-platformsh-deploy-status#the-deploy-status-file"; \
          exit 2; \
        fi

        CURL_STATUS=$(curl -L -s $DEPLOY_STATUS_URL)

        if [[ "$CURL_STATUS" != "1" ]]; then \
          echo "PlatformSH silently failed to deploy your PR."; \
          echo ""; \
          echo "You can view the deploy log with:"; \
          echo "$ platform log deploy -e ${{ inputs.ENVIRONMENT_NAME }} -p ${{ inputs.PLATFORMSH_ID }}"; \

          exit 2; \
        fi

        echo "PlatformSH successfully deployed your PR."
